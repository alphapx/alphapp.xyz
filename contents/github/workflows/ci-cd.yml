Basándome en la información proporcionada en las fuentes, puedo presentarte el contenido de un archivo `ci-cd.yml` que se encontraría en la ruta `alphapp.xyz/content/github/workflows/`, utilizado para la Integración Continua/Entrega Continua (CI/CD) con GitHub Actions para el microservicio de gestión de contenidos.

Este archivo define un **flujo de trabajo de CI/CD** que se activa cuando se confirman cambios en la rama principal (`main`). El pipeline consta de varias etapas: construcción (`build`), pruebas (`test`), despliegue en desarrollo (`deploy-dev`), despliegue en producción (`deploy-prod`), y un paso de aprobación manual antes del despliegue en producción.

Aquí tienes el contenido del archivo `ci-cd.yml` extraído de las fuentes:

```yaml
name: CI/CD

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: docker-compose build

  test:
    runs-on: ubuntu-latest
    needs: [build] # Agregado basado en el flujo de trabajo general que indica que las pruebas siguen a la construcción. Fuente lo omite pero lo muestra para deploy.
    steps:
      - uses: actions/checkout@v2
      - run: docker-compose run --rm users pytest /app/tests # Ejemplo genérico, debería ser específico para el microservicio de contenido. Modificado basándose en pruebas para microservicios específicos.
      # run: docker-compose run --rm content pytest /app/tests # Comando más probable para el microservicio de contenido

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      # run: docker-compose up -d # Esto sería para despliegue local, no en Kubernetes.
      # Basándose en la guía de despliegue en Kubernetes:
      - uses: google/cloud-sdk # Ejemplo de uso de Google Cloud SDK en CI/CD
      - run: gcloud auth activate-service-account --key-file=${KEYFILE}
      - run: gcloud config set project ${PROJECT_ID}
      - run: kubectl config set-context --cluster=${CLUSTER_NAME} --user=${USER_NAME}
      - run: kubectl apply -f deployment-dev.yaml # Aplicar configuración de despliegue para desarrollo en Kubernetes.

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [deploy-dev, approve]
    steps:
      - uses: actions/checkout@v2
      # Basándose en la guía de despliegue en Kubernetes:
      - uses: google/cloud-sdk # Ejemplo de uso de Google Cloud SDK en CI/CD
      - run: gcloud auth activate-service-account --key-file=${KEYFILE}
      - run: gcloud config set project ${PROJECT_ID}
      - run: kubectl config set-context --cluster=${CLUSTER_NAME} --user=${USER_NAME}
      - run: kubectl apply -f deployment-prod.yaml # Aplicar configuración de despliegue para producción en Kubernetes.

  approve:
    needs: [deploy-dev]
    runs-on: ubuntu-latest # O un ejecutor específico si es necesario
    steps:
      - run: echo "Waiting for manual approval..." # Acción placeholder, la aprobación se configura en la sección workflows
    workflows: # Esta sección define la orquestación de jobs
      version: '2.0' # Esto parece una mezcla con CircleCI syntax en la fuente, la sintaxis típica de GitHub Actions es diferente aquí, pero mantengo la fuente.
      build-test-deploy:
        jobs:
          - build
          - test:
              requires: [build]
          - deploy-dev:
              requires: [test]
          - deploy-prod:
              requires: [deploy-dev, approve]
              filters:
                branches:
                  only: [main]
          - approve:
              type: approval # Sintaxis de CircleCI según fuente, en GitHub Actions esto se gestiona en las configuraciones del entorno o ramas.
              requires: [deploy-dev]
